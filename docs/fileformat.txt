/////////////////////////////////////////////
LEGACY FORMAT
/////////////////////////////////////////////


NOTE: Not everything here is correct. I will explain soon enough.

   All lines starting with a '.' is some metadata given to the reader.
These metadata must be given at the beginning of the file.
We need to know if the file is in hex or binary format
This is the very first line expected in the input file
.fmt_hex or .fmt_bin
only hexadecimal and binary format is allowed.
Some of these metadata is a must or else unexpected things might happen
Here are all of the metadata available
.dlen [len] and .ilen [len] : Specifies the length of the data section and ilen in bytes. The reader will expect to read len number of bytes as specified.
                              If not specified then no data or instruction is read.
.ibstart [pos] and .ibend [pos]: Specifies the starting bytes position of the instruction bytes and the ending byte position. Starts from 0.
.dbstart [pos] and .dbend [pos]: Specifies the same as above but for data bytes.
Note: The position of data bytes and instruction bytes must not overlap.

An example file would be[Keep in mind that changes are made all the time]:
[
    .fmt_<hex or bin>
    .dlen 12 NOTE: data can be of any length even 1 byte. The reader appends other 7 bytes to the back and makes it 8 bytes
    .ilen 16 NOTE: instruction len is and always must be a multiple of 8 or else it is an error
    OTHER ATTRIBUTES
]
THE DATA AND INSTRUCTIONS

NOTE: In the file the instructions and data must be written in big endian format. Any byte appended to make bytes a multiple of 8 are appended to the end.
This will result in data being large. More attributes may be added to change these settings.
   
      There really is no restrictions as to how the files structures the bytes.
      There can be as many spaces, newlines as possible but if the attributes imply hex format, the input bytes must be in hex as well
      The same goes for the binary format. In case the format is hex, two characters are read everytime. In case of binary, 8 characters are read everytime.
      So for example:
      In hex format, the file may be;
      00 AB EEFF 1188 09.....
      In bin format, the file may be:
      0001000101110010 1100110 010...
      As you can see, in hex format, the bytes can be grouped in any length as long as it is a multiple of 2.
      If there are numbers that are not paired, like '8 99 01', here the 8 would produce an error.
      The same applies for binary except the minimum length for the group is 8 and the whole group must be at least a multiple of 8

#######################################################################################################################################################
#######################################################################################################################################################
UPDATE
#######################################################################################################################################################
#######################################################################################################################################################
Now the input file will be in pure binary. Here are what we need from the binary:
1. The ordering of the bytes in the file[The ordering of the host system is preferred for faster reading]
2. The details of the data section and the instruction section.

These are the only things we need currently.
The first 8 bytes in the file must contain this information:
--> In Little Endian system, this is what the file would look like: 4d 49 4e 00 00 00 00 00
--> In Big Endian systems, this is what the file would look like:   00 00 00 00 00 4d 49 4e